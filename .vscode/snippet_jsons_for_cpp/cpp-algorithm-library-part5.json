{
  "cpp_numeric__inner_product": {
    "prefix": "cpp_numeric__inner_product",
    "body": [
      "// std::inner_product - Calculate inner product of two ranges",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/inner_product",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "",
      "std::vector<int> a = {1, 2, 3};",
      "std::vector<int> b = {4, 5, 6};",
      "",
      "// Default inner product (sum of products)",
      "// (1*4) + (2*5) + (3*6) = 4 + 10 + 18 = 32",
      "int result = std::inner_product(a.begin(), a.end(), b.begin(), 0);",
      "std::cout << \"Inner product: \" << result << std::endl; // 32",
      "",
      "// Custom operations: e.g., sum of differences",
      "// (1-4) + (2-5) + (3-6) = -3 + -3 + -3 = -9",
      "int custom_result = std::inner_product(a.begin(), a.end(), b.begin(), 0,",
      "                                       std::plus<int>(), std::minus<int>());",
      "std::cout << \"Custom inner product (sum of differences): \" << custom_result << std::endl; // -9",
      "",
      "// Boolean logic: check if all elements are equal (like std::equal)",
      "std::vector<bool> bool_a = {true, false, true};",
      "std::vector<bool> bool_b = {true, false, true};",
      "bool all_equal = std::inner_product(bool_a.begin(), bool_a.end(), bool_b.begin(), true,",
      "                                    std::logical_and<bool>(), std::equal_to<bool>());",
      "std::cout << \"All elements equal: \" << std::boolalpha << all_equal << std::endl; // true",
      "$0"
    ],
    "description": "Calculates the inner product (sum of products) of two ranges. It can also perform custom binary operations for both the accumulation and the element-wise combination. Time complexity: O(n) applications of the binary operations. Link: https://en.cppreference.com/w/cpp/numeric/inner_product"
  },
  "cpp_numeric__adjacent_difference": {
    "prefix": "cpp_numeric__adjacent_difference",
    "body": [
      "// std::adjacent_difference - Calculate differences between adjacent elements",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/adjacent_difference",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "",
      "std::vector<int> in = {1, 2, 4, 7, 11, 16};",
      "std::vector<int> out(in.size());",
      "",
      "// Calculate adjacent differences (default: subtraction)",
      "// out[0] = in[0]",
      "// out[i] = in[i] - in[i-1] for i > 0",
      "std::adjacent_difference(in.begin(), in.end(), out.begin());",
      "",
      "std::cout << \"Original: \";",
      "for (int x : in) std::cout << x << \" \";",
      "std::cout << std::endl;",
      "",
      "std::cout << \"Differences: \";",
      "for (int x : out) std::cout << x << \" \";",
      "std::cout << std::endl; // Differences: 1 1 2 3 4 5",
      "",
      "// With custom binary operation (e.g., sum of adjacent elements)",
      "std::vector<int> out_sum(in.size());",
      "std::adjacent_difference(in.begin(), in.end(), out_sum.begin(), std::plus<int>());",
      "",
      "std::cout << \"Sums: \";",
      "for (int x : out_sum) std::cout << x << \" \";",
      "std::cout << std::endl; // Sums: 1 3 6 11 18 27",
      "",
      "// Can be used to reconstruct original sequence from differences (with std::partial_sum)",
      "std::vector<int> reconstructed(out.size());",
      "std::partial_sum(out.begin(), out.end(), reconstructed.begin());",
      "std::cout << \"Reconstructed: \";",
      "for (int x : reconstructed) std::cout << x << \" \";",
      "std::cout << std::endl; // Reconstructed: 1 2 4 7 11 16",
      "$0"
    ],
    "description": "Calculates the differences between adjacent elements in a range and stores them in an output range. The first element of the output range is the same as the first element of the input range. Subsequent elements are the result of applying a binary operation (default: subtraction) to the current element and the previous element. Time complexity: O(n) applications of the binary operation. Link: https://en.cppreference.com/w/cpp/numeric/adjacent_difference"
  },
  "cpp_numeric__partial_sum": {
    "prefix": "cpp_numeric__partial_sum",
    "body": [
      "// std::partial_sum - Calculate partial sums (prefix sums)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/partial_sum",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "",
      "std::vector<int> in = {1, 2, 3, 4, 5};",
      "std::vector<int> out(in.size());",
      "",
      "// Calculate partial sums (default: addition)",
      "// out[0] = in[0]",
      "// out[i] = out[i-1] + in[i]",
      "std::partial_sum(in.begin(), in.end(), out.begin());",
      "",
      "std::cout << \"Original: \";",
      "for (int x : in) std::cout << x << \" \";",
      "std::cout << std::endl;",
      "",
      "std::cout << \"Partial sums: \";",
      "for (int x : out) std::cout << x << \" \";",
      "std::cout << std::endl; // Partial sums: 1 3 6 10 15",
      "",
      "// With custom binary operation (e.g., partial products)",
      "std::vector<int> out_prod(in.size());",
      "std::partial_sum(in.begin(), in.end(), out_prod.begin(), std::multiplies<int>());",
      "",
      "std::cout << \"Partial products: \";",
      "for (int x : out_prod) std::cout << x << \" \";",
      "std::cout << std::endl; // Partial products: 1 2 6 24 120",
      "",
      "// Using std::partial_sum to reconstruct original sequence from adjacent_difference",
      "std::vector<int> diffs = {1, 1, 2, 3, 4, 5}; // From previous adjacent_difference example",
      "std::vector<int> reconstructed(diffs.size());",
      "std::partial_sum(diffs.begin(), diffs.end(), reconstructed.begin());",
      "std::cout << \"Reconstructed from diffs: \";",
      "for (int x : reconstructed) std::cout << x << \" \";",
      "std::cout << std::endl; // Reconstructed from diffs: 1 2 4 7 11 16",
      "$0"
    ],
    "description": "Calculates the partial sums (prefix sums) of a range and stores them in an output range. Each element in the output range is the result of applying a binary operation (default: addition) to the current element and the accumulated sum of previous elements. Supports custom binary operations. Time complexity: O(n) applications of the binary operation. Link: https://en.cppreference.com/w/cpp/numeric/partial_sum"
  },
  "cpp_numeric__exclusive_scan": {
    "prefix": "cpp_numeric__exclusive_scan",
    "body": [
      "// std::exclusive_scan - Computes an exclusive prefix sum (C++17)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/exclusive_scan",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "",
      "std::vector<int> in = {1, 2, 3, 4, 5};",
      "std::vector<int> out(in.size());",
      "",
      "// Exclusive scan (default: addition, initial value 0)",
      "// out[0] = init",
      "// out[i] = out[i-1] + in[i-1]",
      "std::exclusive_scan(in.begin(), in.end(), out.begin(), 0);",
      "",
      "std::cout << \"Original: \";",
      "for (int x : in) std::cout << x << \" \";",
      "std::cout << std::endl;",
      "",
      "std::cout << \"Exclusive scan (sum, init 0): \";",
      "for (int x : out) std::cout << x << \" \";",
      "std::cout << std::endl; // Exclusive scan (sum, init 0): 0 1 3 6 10",
      "",
      "// Exclusive scan with different initial value and custom operation (e.g., multiplication)",
      "std::vector<int> out_prod(in.size());",
      "std::exclusive_scan(in.begin(), in.end(), out_prod.begin(), 1, std::multiplies<int>());",
      "",
      "std::cout << \"Exclusive scan (product, init 1): \";",
      "for (int x : out_prod) std::cout << x << \" \";",
      "std::cout << std::endl; // Exclusive scan (product, init 1): 1 1 2 6 24",
      "$0"
    ],
    "description": "Computes an exclusive prefix sum (or other binary operation) over a range. The i-th element of the output is the result of applying the binary operation to the initial value and the first i-1 elements of the input range. The first element of the output is always the initial value. Time complexity: O(n) applications of the binary operation. Link: https://en.cppreference.com/w/cpp/numeric/exclusive_scan"
  },
  "cpp_numeric__inclusive_scan": {
    "prefix": "cpp_numeric__inclusive_scan",
    "body": [
      "// std::inclusive_scan - Computes an inclusive prefix sum (C++17)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/inclusive_scan",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "",
      "std::vector<int> in = {1, 2, 3, 4, 5};",
      "std::vector<int> out(in.size());",
      "",
      "// Inclusive scan (default: addition)",
      "// out[0] = in[0]",
      "// out[i] = out[i-1] + in[i]",
      "std::inclusive_scan(in.begin(), in.end(), out.begin());",
      "",
      "std::cout << \"Original: \";",
      "for (int x : in) std::cout << x << \" \";",
      "std::cout << std::endl;",
      "",
      "std::cout << \"Inclusive scan (sum): \";",
      "for (int x : out) std::cout << x << \" \";",
      "std::cout << std::endl; // Inclusive scan (sum): 1 3 6 10 15",
      "",
      "// Inclusive scan with custom operation (e.g., multiplication)",
      "std::vector<int> out_prod(in.size());",
      "std::inclusive_scan(in.begin(), in.end(), out_prod.begin(), std::multiplies<int>());",
      "",
      "std::cout << \"Inclusive scan (product): \";",
      "for (int x : out_prod) std::cout << x << \" \";",
      "std::cout << std::endl; // Inclusive scan (product): 1 2 6 24 120",
      "",
      "// Inclusive scan with initial value",
      "std::vector<int> out_init(in.size());",
      "std::inclusive_scan(in.begin(), in.end(), out_init.begin(), std::plus<int>(), 100);",
      "",
      "std::cout << \"Inclusive scan (sum, init 100): \";",
      "for (int x : out_init) std::cout << x << \" \";",
      "std::cout << std::endl; // Inclusive scan (sum, init 100): 101 103 106 110 115",
      "$0"
    ],
    "description": "Computes an inclusive prefix sum (or other binary operation) over a range. The i-th element of the output is the result of applying the binary operation to the first i elements of the input range. The first element of the output is the first element of the input. Supports custom binary operations and an optional initial value. Time complexity: O(n) applications of the binary operation. Link: https://en.cppreference.com/w/cpp/numeric/inclusive_scan"
  },
  "cpp_numeric__transform_reduce": {
    "prefix": "cpp_numeric__transform_reduce",
    "body": [
      "// std::transform_reduce - Transform and reduce range (C++17)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/transform_reduce",
      "#include <numeric>",
      "#include <vector>",
      "#include <iostream>",
      "#include <functional>",
      "",
      "std::vector<int> v1 = {1, 2, 3, 4, 5};",
      "std::vector<int> v2 = {10, 20, 30, 40, 50};",
      "",
      "// Transform and reduce: sum of squares",
      "// (1*1) + (2*2) + (3*3) + (4*4) + (5*5) = 1 + 4 + 9 + 16 + 25 = 55",
      "int sum_of_squares = std::transform_reduce(v1.begin(), v1.end(), 0,",
      "                                           std::plus<int>(),",
      "                                           [](int x){ return x * x; });",
      "std::cout << \"Sum of squares: \" << sum_of_squares << std::endl; // 55",
      "",
      "// Transform and reduce: inner product (equivalent to std::inner_product)",
      "// (1*10) + (2*20) + (3*30) + (4*40) + (5*50) = 10 + 40 + 90 + 160 + 250 = 550",
      "int inner_prod = std::transform_reduce(v1.begin(), v1.end(), v2.begin(), 0);",
      "std::cout << \"Inner product (using transform_reduce): \" << inner_prod << std::endl; // 550",
      "",
      "// Custom transform and reduce: sum of absolute differences",
      "// |1-10| + |2-20| + |3-30| + |4-40| + |5-50| = 9 + 18 + 27 + 36 + 45 = 135",
      "int sum_abs_diff = std::transform_reduce(v1.begin(), v1.end(), v2.begin(), 0,",
      "                                         std::plus<int>(),",
      "                                         [](int x, int y){ return std::abs(x - y); });",
      "std::cout << \"Sum of absolute differences: \" << sum_abs_diff << std::endl; // 135",
      "$0"
    ],
    "description": "Applies a transformation to each element (or pair of elements from two ranges) and then reduces the results using a binary operation. It's a generalization of std::accumulate and std::inner_product. Supports custom transformation and reduction operations. Can be parallelized with execution policies. Time complexity: O(n) applications of the transformation and reduction operations. Link: https://en.cppreference.com/w/cpp/numeric/transform_reduce"
  },
  "cpp_numeric__gcd": {
    "prefix": "cpp_numeric__gcd",
    "body": [
      "// std::gcd - Greatest common divisor (C++17)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/gcd",
      "#include <numeric>",
      "#include <iostream>",
      "",
      "// Basic usage",
      "int g1 = std::gcd(12, 18);",
      "std::cout << \"GCD(12, 18): \" << g1 << std::endl; // 6",
      "",
      "int g2 = std::gcd(35, 10);",
      "std::cout << \"GCD(35, 10): \" << g2 << std::endl; // 5",
      "",
      "int g3 = std::gcd(7, 13);",
      "std::cout << \"GCD(7, 13): \" << g3 << std::endl; // 1 (coprime)",
      "",
      "// One argument is zero",
      "int g4 = std::gcd(0, 5);",
      "std::cout << \"GCD(0, 5): \" << g4 << std::endl; // 5",
      "",
      "int g5 = std::gcd(10, 0);",
      "std::cout << \"GCD(10, 0): \" << g5 << std::endl; // 10",
      "",
      "int g6 = std::gcd(0, 0);",
      "std::cout << \"GCD(0, 0): \" << g6 << std::endl; // 0",
      "",
      "// Negative numbers (result is always non-negative)",
      "int g7 = std::gcd(-12, 18);",
      "std::cout << \"GCD(-12, 18): \" << g7 << std::endl; // 6",
      "",
      "int g8 = std::gcd(-12, -18);",
      "std::cout << \"GCD(-12, -18): \" << g8 << std::endl; // 6",
      "$0"
    ],
    "description": "Computes the greatest common divisor (GCD) of two integers. The result is always non-negative. If both arguments are zero, the result is zero. Time complexity: Logarithmic in the values of the arguments. Link: https://en.cppreference.com/w/cpp/numeric/gcd"
  },
  "cpp_numeric__lcm": {
    "prefix": "cpp_numeric__lcm",
    "body": [
      "// std::lcm - Least common multiple (C++17)",
      "// Reference: https://en.cppreference.com/w/cpp/numeric/lcm",
      "#include <numeric>",
      "#include <iostream>",
      "",
      "// Basic usage",
      "int l1 = std::lcm(12, 18);",
      "std::cout << \"LCM(12, 18): \" << l1 << std::endl; // 36",
      "",
      "int l2 = std::lcm(7, 13);",
      "std::cout << \"LCM(7, 13): \" << l2 << std::endl; // 91 (coprime)",
      "",
      "int l3 = std::lcm(4, 6);",
      "std::cout << \"LCM(4, 6): \" << l3 << std::endl; // 12",
      "",
      "// One argument is zero (result is zero)",
      "int l4 = std::lcm(0, 5);",
      "std::cout << \"LCM(0, 5): \" << l4 << std::endl; // 0",
      "",
      "int l5 = std::lcm(10, 0);",
      "std::cout << \"LCM(10, 0): \" << l5 << std::endl; // 0",
      "",
      "int l6 = std::lcm(0, 0);",
      "std::cout << \"LCM(0, 0): \" << l6 << std::endl; // 0",
      "",
      "// Negative numbers (result is always non-negative)",
      "int l7 = std::lcm(-12, 18);",
      "std::cout << \"LCM(-12, 18): \" << l7 << std::endl; // 36",
      "",
      "int l8 = std::lcm(-12, -18);",
      "std::cout << \"LCM(-12, -18): \" << l8 << std::endl; // 36",
      "$0"
    ],
    "description": "Computes the least common multiple (LCM) of two integers. The result is always non-negative. If either argument is zero, the result is zero. Time complexity: Logarithmic in the values of the arguments. Link: https://en.cppreference.com/w/cpp/numeric/lcm"
  }
}
