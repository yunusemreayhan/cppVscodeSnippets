{
  "cpp_design_pattern__creational__abstract_factory": {
    "prefix": "cpp_design_pattern__creational__abstract_factory",
    "description": "Implements the Abstract Factory pattern (Creational)",
    "body": [
      "class ${1:AbstractProductA} {",
      "public:",
      "    virtual void use() = 0;",
      "    virtual ~${1:AbstractProductA}() = default;",
      "};",
      "",
      "class ${2:AbstractProductB} {",
      "public:",
      "    virtual void interact() = 0;",
      "    virtual ~${2:AbstractProductB}() = default;",
      "};",
      "",
      "class ${3:ConcreteProductA1} : public ${1:AbstractProductA} {",
      "public:",
      "    void use() override { /* Implementation */ }",
      "};",
      "",
      "class ${4:ConcreteProductB1} : public ${2:AbstractProductB} {",
      "public:",
      "    void interact() override { /* Implementation */ }",
      "};",
      "",
      "class ${5:AbstractFactory} {",
      "public:",
      "    virtual ${1:AbstractProductA}* createProductA() = 0;",
      "    virtual ${2:AbstractProductB}* createProductB() = 0;",
      "    virtual ~${5:AbstractFactory}() = default;",
      "};",
      "",
      "class ${6:ConcreteFactory1} : public ${5:AbstractFactory} {",
      "public:",
      "    ${1:AbstractProductA}* createProductA() override { return new ${3:ConcreteProductA1}; }",
      "    ${2:AbstractProductB}* createProductB() override { return new ${4:ConcreteProductB1}; }",
      "};"
    ]
  },
  "cpp_design_pattern__creational__builder": {
    "prefix": "cpp_design_pattern__creational__builder",
    "description": "Implements the Builder pattern (Creational)",
    "body": [
      "class ${1:Product} {",
      "public:",
      "    void addPart(const std::string& part) { /* Add part */ }",
      "};",
      "",
      "class ${2:Builder} {",
      "public:",
      "    virtual void buildPartA() = 0;",
      "    virtual void buildPartB() = 0;",
      "    virtual ${1:Product}* getResult() = 0;",
      "    virtual ~${2:Builder}() = default;",
      "};",
      "",
      "class ${3:ConcreteBuilder} : public ${2:Builder} {",
      "private:",
      "    ${1:Product}* product = new ${1:Product};",
      "public:",
      "    void buildPartA() override { product->addPart(\"PartA\"); }",
      "    void buildPartB() override { product->addPart(\"PartB\"); }",
      "    ${1:Product}* getResult() override { return product; }",
      "};",
      "",
      "class ${4:Director} {",
      "public:",
      "    void construct(${2:Builder}* builder) {",
      "        builder->buildPartA();",
      "        builder->buildPartB();",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__creational__factory_method": {
    "prefix": "cpp_design_pattern__creational__factory_method",
    "description": "Implements the Factory Method pattern (Creational)",
    "body": [
      "class ${1:Product} {",
      "public:",
      "    virtual void use() = 0;",
      "    virtual ~${1:Product}() = default;",
      "};",
      "",
      "class ${2:ConcreteProduct} : public ${1:Product} {",
      "public:",
      "    void use() override { /* Implementation */ }",
      "};",
      "",
      "class ${3:Creator} {",
      "public:",
      "    virtual ${1:Product}* factoryMethod() = 0;",
      "    virtual ~${3:Creator}() = default;",
      "};",
      "",
      "class ${4:ConcreteCreator} : public ${3:Creator} {",
      "public:",
      "    ${1:Product}* factoryMethod() override { return new ${2:ConcreteProduct}; }",
      "};"
    ]
  },
  "cpp_design_pattern__creational__prototype": {
    "prefix": "cpp_design_pattern__creational__prototype",
    "description": "Implements the Prototype pattern (Creational)",
    "body": [
      "class ${1:Prototype} {",
      "public:",
      "    virtual ${1:Prototype}* clone() const = 0;",
      "    virtual void use() = 0;",
      "    virtual ~${1:Prototype}() = default;",
      "};",
      "",
      "class ${2:ConcretePrototype} : public ${1:Prototype} {",
      "private:",
      "    int data;",
      "public:",
      "    ${2:ConcretePrototype}(int d) : data(d) {}",
      "    ${1:Prototype}* clone() const override { return new ${2:ConcretePrototype}(data); }",
      "    void use() override { /* Implementation */ }",
      "};"
    ]
  },
  "cpp_design_pattern__creational__singleton": {
    "prefix": "cpp_design_pattern__creational__singleton",
    "description": "Implements a thread-safe Singleton pattern (Creational)",
    "body": [
      "class ${1:Singleton} {",
      "public:",
      "    static ${1:Singleton}& getInstance() {",
      "        static ${1:Singleton} instance;",
      "        return instance;",
      "    }",
      "",
      "    ${1:Singleton}(${1:Singleton} const&) = delete;",
      "    void operator=(${1:Singleton} const&) = delete;",
      "",
      "private:",
      "    ${1:Singleton}() { /* Initialize */ }",
      "    ${0}",
      "};"
    ]
  }
}
