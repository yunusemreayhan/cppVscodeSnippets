{
  "cpp_design_pattern__structural__adapter": {
    "prefix": "cpp_design_pattern__structural__adapter",
    "description": "Implements the Adapter pattern (Structural)",
    "body": [
      "class ${1:Target} {",
      "public:",
      "    virtual void request() const = 0;",
      "    virtual ~${1:Target}() = default;",
      "};",
      "",
      "class ${2:Adaptee} {",
      "public:",
      "    void specificRequest() const { /* Implementation */ }",
      "};",
      "",
      "class ${3:Adapter} : public ${1:Target} {",
      "private:",
      "    ${2:Adaptee}* adaptee;",
      "public:",
      "    ${3:Adapter}(${2:Adaptee}* a) : adaptee(a) {}",
      "    void request() const override { adaptee->specificRequest(); }",
      "};"
    ]
  },
  "cpp_design_pattern__structural__bridge": {
    "prefix": "cpp_design_pattern__structural__bridge",
    "description": "Implements the Bridge pattern (Structural)",
    "body": [
      "class ${1:Implementor} {",
      "public:",
      "    virtual void operationImpl() = 0;",
      "    virtual ~${1:Implementor}() = default;",
      "};",
      "",
      "class ${2:ConcreteImplementor} : public ${1:Implementor} {",
      "public:",
      "    void operationImpl() override { /* Implementation */ }",
      "};",
      "",
      "class ${3:Abstraction} {",
      "protected:",
      "    ${1:Implementor}* implementor;",
      "public:",
      "    ${3:Abstraction}(${1:Implementor}* impl) : implementor(impl) {}",
      "    virtual void operation() { implementor->operationImpl(); }",
      "    virtual ~${3:Abstraction}() = default;",
      "};"
    ]
  },
  "cpp_design_pattern__structural__composite": {
    "prefix": "cpp_design_pattern__structural__composite",
    "description": "Implements the Composite pattern (Structural)",
    "body": [
      "#include <vector>",
      "",
      "class ${1:Component} {",
      "public:",
      "    virtual void operation() = 0;",
      "    virtual ~${1:Component}() = default;",
      "};",
      "",
      "class ${2:Leaf} : public ${1:Component} {",
      "public:",
      "    void operation() override { /* Leaf operation */ }",
      "};",
      "",
      "class ${3:Composite} : public ${1:Component} {",
      "private:",
      "    std::vector<${1:Component}*> children;",
      "public:",
      "    void add(${1:Component}* component) { children.push_back(component); }",
      "    void operation() override {",
      "        for (auto* child : children) child->operation();",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__structural__decorator": {
    "prefix": "cpp_design_pattern__structural__decorator",
    "description": "Implements the Decorator pattern (Structural)",
    "body": [
      "class ${1:Component} {",
      "public:",
      "    virtual void operation() const = 0;",
      "    virtual ~${1:Component}() = default;",
      "};",
      "",
      "class ${2:ConcreteComponent} : public ${1:Component} {",
      "public:",
      "    void operation() const override { /* Core functionality */ }",
      "};",
      "",
      "class ${3:Decorator} : public ${1:Component} {",
      "protected:",
      "    ${1:Component}* component;",
      "public:",
      "    ${3:Decorator}(${1:Component}* comp) : component(comp) {}",
      "    void operation() const override { component->operation(); /* Add behavior */ }",
      "};"
    ]
  },
  "cpp_design_pattern__structural__facade": {
    "prefix": "cpp_design_pattern__structural__facade",
    "description": "Implements the Facade pattern (Structural)",
    "body": [
      "class ${1:Subsystem1} {",
      "public:",
      "    void operation1() const { /* Subsystem1 logic */ }",
      "};",
      "",
      "class ${2:Subsystem2} {",
      "public:",
      "    void operation2() const { /* Subsystem2 logic */ }",
      "};",
      "",
      "class ${3:Facade} {",
      "private:",
      "    ${1:Subsystem1} subsystem1;",
      "    ${2:Subsystem2} subsystem2;",
      "public:",
      "    void operation() {",
      "        subsystem1.operation1();",
      "        subsystem2.operation2();",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__structural__flyweight": {
    "prefix": "cpp_design_pattern__structural__flyweight",
    "description": "Implements the Flyweight pattern (Structural)",
    "body": [
      "#include <unordered_map>",
      "",
      "class ${1:Flyweight} {",
      "public:",
      "    virtual void operation(int extrinsicState) = 0;",
      "    virtual ~${1:Flyweight}() = default;",
      "};",
      "",
      "class ${2:ConcreteFlyweight} : public ${1:Flyweight} {",
      "private:",
      "    int intrinsicState;",
      "public:",
      "    ${2:ConcreteFlyweight}(int state) : intrinsicState(state) {}",
      "    void operation(int extrinsicState) override { /* Use intrinsic/extrinsic state */ }",
      "};",
      "",
      "class ${3:FlyweightFactory} {",
      "private:",
      "    std::unordered_map<int, ${1:Flyweight}*> flyweights;",
      "public:",
      "    ${1:Flyweight}* getFlyweight(int key) {",
      "        if (flyweights.find(key) == flyweights.end()) {",
      "            flyweights[key] = new ${2:ConcreteFlyweight}(key);",
      "        }",
      "        return flyweights[key];",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__structural__proxy": {
    "prefix": "cpp_design_pattern__structural__proxy",
    "description": "Implements the Proxy pattern (Structural)",
    "body": [
      "class ${1:Subject} {",
      "public:",
      "    virtual void request() = 0;",
      "    virtual ~${1:Subject}() = default;",
      "};",
      "",
      "class ${2:RealSubject} : public ${1:Subject} {",
      "public:",
      "    void request() override { /* Real implementation */ }",
      "};",
      "",
      "class ${3:Proxy} : public ${1:Subject} {",
      "private:",
      "    ${2:RealSubject}* realSubject = nullptr;",
      "public:",
      "    void request() override {",
      "        if (!realSubject) realSubject = new ${2:RealSubject};",
      "        realSubject->request();",
      "    }",
      "};"
    ]
  }
}
