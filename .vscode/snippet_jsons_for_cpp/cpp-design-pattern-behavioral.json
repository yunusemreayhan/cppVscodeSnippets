{
  "cpp_design_pattern__behavioral__chain_of_responsibility": {
    "prefix": "cpp_design_pattern__behavioral__chain_of_responsibility",
    "description": "Implements the Chain of Responsibility pattern (Behavioral)",
    "body": [
      "class ${1:Handler} {",
      "public:",
      "    virtual void setNext(${1:Handler}* next) = 0;",
      "    virtual void handleRequest(int request) = 0;",
      "    virtual ~${1:Handler}() = default;",
      "};",
      "",
      "class ${2:ConcreteHandler} : public ${1:Handler} {",
      "private:",
      "    ${1:Handler}* nextHandler = nullptr;",
      "public:",
      "    void setNext(${1:Handler}* next) override { nextHandler = next; }",
      "    void handleRequest(int request) override {",
      "        if (/* condition */) { /* Handle */ }",
      "        else if (nextHandler) nextHandler->handleRequest(request);",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__command": {
    "prefix": "cpp_design_pattern__behavioral__command",
    "description": "Implements the Command pattern (Behavioral)",
    "body": [
      "class ${1:Command} {",
      "public:",
      "    virtual void execute() = 0;",
      "    virtual ~${1:Command}() = default;",
      "};",
      "",
      "class ${2:Receiver} {",
      "public:",
      "    void action() { /* Implementation */ }",
      "};",
      "",
      "class ${3:ConcreteCommand} : public ${1:Command} {",
      "private:",
      "    ${2:Receiver}* receiver;",
      "public:",
      "    ${3:ConcreteCommand}(${2:Receiver}* r) : receiver(r) {}",
      "    void execute() override { receiver->action(); }",
      "};",
      "",
      "class ${4:Invoker} {",
      "private:",
      "    ${1:Command}* command;",
      "public:",
      "    void setCommand(${1:Command}* cmd) { command = cmd; }",
      "    void executeCommand() { command->execute(); }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__interpreter": {
    "prefix": "cpp_design_pattern__behavioral__interpreter",
    "description": "Implements the Interpreter pattern (Behavioral)",
    "body": [
      "class ${1:Expression} {",
      "public:",
      "    virtual int interpret() = 0;",
      "    virtual ~${1:Expression}() = default;",
      "};",
      "",
      "class ${2:TerminalExpression} : public ${1:Expression} {",
      "private:",
      "    int value;",
      "public:",
      "    ${2:TerminalExpression}(int val) : value(val) {}",
      "    int interpret() override { return value; }",
      "};",
      "",
      "class ${3:NonTerminalExpression} : public ${1:Expression} {",
      "private:",
      "    ${1:Expression}* left;",
      "    ${1:Expression}* right;",
      "public:",
      "    ${3:NonTerminalExpression}(${1:Expression}* l, ${1:Expression}* r) : left(l), right(r) {}",
      "    int interpret() override { return left->interpret() + right->interpret(); }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__iterator": {
    "prefix": "cpp_design_pattern__behavioral__iterator",
    "description": "Implements the Iterator pattern (Behavioral)",
    "body": [
      "#include <vector>",
      "",
      "class ${1:Iterator} {",
      "public:",
      "    virtual bool hasNext() = 0;",
      "    virtual int next() = 0;",
      "    virtual ~${1:Iterator}() = default;",
      "};",
      "",
      "class ${2:Aggregate} {",
      "public:",
      "    virtual ${1:Iterator}* createIterator() = 0;",
      "    virtual ~${2:Aggregate}() = default;",
      "};",
      "",
      "class ${3:ConcreteAggregate} : public ${2:Aggregate} {",
      "private:",
      "    std::vector<int> items;",
      "public:",
      "    ${1:Iterator}* createIterator() override;",
      "    void add(int item) { items.push_back(item); }",
      "};",
      "",
      "class ${4:ConcreteIterator} : public ${1:Iterator} {",
      "private:",
      "    ${3:ConcreteAggregate}* aggregate;",
      "    size_t index = 0;",
      "public:",
      "    ${4:ConcreteIterator}(${3:ConcreteAggregate}* agg) : aggregate(agg) {}",
      "    bool hasNext() override { return index < aggregate->items.size(); }",
      "    int next() override { return aggregate->items[index++]; }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__mediator": {
    "prefix": "cpp_design_pattern__behavioral__mediator",
    "description": "Implements the Mediator pattern (Behavioral)",
    "body": [
      "class ${1:Mediator} {",
      "public:",
      "    virtual void notify(class ${2:Colleague}* sender, const std::string& event) = 0;",
      "    virtual ~${1:Mediator}() = default;",
      "};",
      "",
      "class ${2:Colleague} {",
      "protected:",
      "    ${1:Mediator}* mediator;",
      "public:",
      "    ${2:Colleague}(${1:Mediator}* m) : mediator(m) {}",
      "};",
      "",
      "class ${3:ConcreteColleague} : public ${2:Colleague} {",
      "public:",
      "    ${3:ConcreteColleague}(${1:Mediator}* m) : ${2:Colleague}(m) {}",
      "    void send(const std::string& event) { mediator->notify(this, event); }",
      "    void receive(const std::string& event) { /* Handle event */ }",
      "};",
      "",
      "class ${4:ConcreteMediator} : public ${1:Mediator} {",
      "private:",
      "    ${3:ConcreteColleague}* colleague1;",
      "    ${3:ConcreteColleague}* colleague2;",
      "public:",
      "    void setColleagues(${3:ConcreteColleague}* c1, ${3:ConcreteColleague}* c2) {",
      "        colleague1 = c1; colleague2 = c2;",
      "    }",
      "    void notify(${2:Colleague}* sender, const std::string& event) override {",
      "        if (sender == colleague1) colleague2->receive(event);",
      "        else colleague1->receive(event);",
      "    }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__memento": {
    "prefix": "cpp_design_pattern__behavioral__memento",
    "description": "Implements the Memento pattern (Behavioral)",
    "body": [
      "class ${1:Memento} {",
      "private:",
      "    std::string state;",
      "public:",
      "    ${1:Memento}(const std::string& s) : state(s) {}",
      "    std::string getState() const { return state; }",
      "};",
      "",
      "class ${2:Originator} {",
      "private:",
      "    std::string state;",
      "public:",
      "    void setState(const std::string& s) { state = s; }",
      "    ${1:Memento}* createMemento() { return new ${1:Memento}(state); }",
      "    void restore(${1:Memento}* memento) { state = memento->getState(); }",
      "};",
      "",
      "class ${3:Caretaker} {",
      "private:",
      "    ${1:Memento}* memento;",
      "public:",
      "    void save(${1:Memento}* m) { memento = m; }",
      "    ${1:Memento}* getMemento() { return memento; }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__observer": {
    "prefix": "cpp_design_pattern__behavioral__observer",
    "description": "Implements the Observer pattern (Behavioral)",
    "body": [
      "#include <vector>",
      "",
      "class ${1:Observer} {",
      "public:",
      "    virtual void update() = 0;",
      "    virtual ~${1:Observer}() = default;",
      "};",
      "",
      "class ${2:Subject} {",
      "private:",
      "    std::vector<${1:Observer}*> observers;",
      "public:",
      "    void attach(${1:Observer}* observer) { observers.push_back(observer); }",
      "    void detach(${1:Observer}* observer) { /* Remove observer */ }",
      "    void notify() { for (auto* obs : observers) obs->update(); }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__state": {
    "prefix": "cpp_design_pattern__behavioral__state",
    "description": "Implements the State pattern (Behavioral)",
    "body": [
      "class ${1:State} {",
      "public:",
      "    virtual void handle(class ${2:Context}* context) = 0;",
      "    virtual ~${1:State}() = default;",
      "};",
      "",
      "class ${2:Context} {",
      "private:",
      "    ${1:State}* state;",
      "public:",
      "    ${2:Context}(${1:State}* s) : state(s) {}",
      "    void setState(${1:State}* s) { state = s; }",
      "    void request() { state->handle(this); }",
      "};",
      "",
      "class ${3:ConcreteState} : public ${1:State} {",
      "public:",
      "    void handle(${2:Context}* context) override { /* Transition logic */ }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__strategy": {
    "prefix": "cpp_design_pattern__behavioral__strategy",
    "description": "Implements the Strategy pattern (Behavioral)",
    "body": [
      "class ${1:Strategy} {",
      "public:",
      "    virtual void execute() = 0;",
      "    virtual ~${1:Strategy}() = default;",
      "};",
      "",
      "class ${2:ConcreteStrategy} : public ${1:Strategy} {",
      "public:",
      "    void execute() override { /* Implementation */ }",
      "};",
      "",
      "class ${3:Context} {",
      "private:",
      "    ${1:Strategy}* strategy;",
      "public:",
      "    ${3:Context}(${1:Strategy}* s) : strategy(s) {}",
      "    void setStrategy(${1:Strategy}* s) { strategy = s; }",
      "    void executeStrategy() { strategy->execute(); }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__template_method": {
    "prefix": "cpp_design_pattern__behavioral__template_method",
    "description": "Implements the Template Method pattern (Behavioral)",
    "body": [
      "class ${1:AbstractClass} {",
      "public:",
      "    void templateMethod() {",
      "        step1();",
      "        step2();",
      "    }",
      "protected:",
      "    virtual void step1() = 0;",
      "    virtual void step2() = 0;",
      "    virtual ~${1:AbstractClass}() = default;",
      "};",
      "",
      "class ${2:ConcreteClass} : public ${1:AbstractClass} {",
      "protected:",
      "    void step1() override { /* Implementation */ }",
      "    void step2() override { /* Implementation */ }",
      "};"
    ]
  },
  "cpp_design_pattern__behavioral__visitor": {
    "prefix": "cpp_design_pattern__behavioral__visitor",
    "description": "Implements the Visitor pattern (Behavioral)",
    "body": [
      "class ${1:Visitor} {",
      "public:",
      "    virtual void visit(class ${2:ElementA}* element) = 0;",
      "    virtual void visit(class ${3:ElementB}* element) = 0;",
      "    virtual ~${1:Visitor}() = default;",
      "};",
      "",
      "class ${4:Element} {",
      "public:",
      "    virtual void accept(${1:Visitor}* visitor) = 0;",
      "    virtual ~${4:Element}() = default;",
      "};",
      "",
      "class ${2:ElementA} : public ${4:Element} {",
      "public:",
      "    void accept(${1:Visitor}* visitor) override { visitor->visit(this); }",
      "};",
      "",
      "class ${3:ElementB} : public ${4:Element} {",
      "public:",
      "    void accept(${1:Visitor}* visitor) override { visitor->visit(this); }",
      "};"
    ]
  }
}
